#include <stdio.h>                                                                       
#include <stdlib.h>                                                                      
#include <stdio.h>                                                                       
#include <unistd.h>                                                                      
#include <sys/types.h>                                                                   
#include <sys/wait.h> 

/**                                                                                      
 * main - fork & wait                                                                    
 *                                                                                       
 * Return: Always 0.                                                                     
 */                                                                                      
                                                                                         
int main(void)                                                                           
{                                                                                        
pid_t child_pid;                                                                         
int status;                                                                              
child_pid = fork();                                                                      
if (child_pid == -1)                                                                     
{                                                                                        
perror("Error:");                                                                        
return (1);                                                                              
}                                                                                        
if (child_pid == 0)                                                                      
{                                                                                        
printf("command not found\n");                                                           
sleep(3);                                                                                
}                                                                                        
else                                                                                     
{                                                                                        
wait(&status);                                                                           
printf("$ \n");                                                                          
}                                                                                        
return (0);                                                                              
}              

/**                                                                                      
 * main - prints "$ ", wait for the user to enter a command                              
 *                                                                                       
 * Return: always 0.                                                                     
 */                                                                                      
                                                                                         
int main(void)                                                                           
{                                                                                        
char *buffer = malloc(1024);                                                             
size_t len = 1024;                                                                       
while (1)                                                                                
{                                                                                        
printf("$");                                                                             
getline(&buffer, &len, stdin);                                                           
printf("%s", buffer);                                                                    
}                                                                                        
return (0);                                                                              

/**                                                                                      
 * main - execve                                                                         
 *                                                                                       
 * Return: always 0.                                                                     
 */                                                                                      
int main(void)                                                                           
{                                                                                        
char *argv[] = {"/bin/ls", "-l", "/usr/", NULL};                                         
printf("Before execve\n");                                                               
if (execve(argv[0], argv, NULL) == -1)                                                   
{                                                                                        
perror("Error:");                                                                        
}                                                                                        
printf("After execve\n");                                                                
return (0);                                                                              
}
/**
 * main - print environment
 *
 * Return: always 0.
 */
int main(int argc, char *argv[], char * envp[])
{
int i;
for (i = 0; envp[i] != NULL; i++)
printf("\n%s", envp[i]);
getchar();
return 0;
}
/**
 * main - handle end of file
 * Return: always 0.
 */
int main() 
{
FILE *f = fopen("new.txt", "r");
int c = getc(f);
while (c != EOF)
{
putchar(c);
c = getc(f);
}
fclose(f);
getchar();
return (0);
}
